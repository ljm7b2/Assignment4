package asteroid1.handlers;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.Platform;

import asteroid1.Game;
import asteroid1.iClock;
import asteroid1.iPlayer;

/**
 * Our sample handler extends AbstractHandler, an IHandler base class.
 * @see org.eclipse.core.commands.IHandler
 * @see org.eclipse.core.commands.AbstractHandler
 */
public class SampleHandler extends AbstractHandler {

	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {

		evaluateExtension();
		//Game.main(null);
		return null;
	}
	
	  private Map<String, String> evaluateExtension() {
		  int count = 0;
		  Map<String, String> GameArgs = new HashMap<String,String>();

			IConfigurationElement[] config = Platform.getExtensionRegistry()
					.getConfigurationElementsFor("Asteroid.ext1");//Change to fit your own
			try {
				for (IConfigurationElement e : config) {
					System.out.println("Evaluating extension");
					String cat1 = e.getName();
					String cat[] = e.getAttributeNames();
					IConfigurationElement[] cat2 = e.getChildren();
					Object oop = e.getParent();
					
					
					for(IConfigurationElement k: cat2){
						String[] cc = k.getAttributeNames();
						String ccc = k.getName();
					}
					
					if(e.getName().equals("Player")){
						final Object o = e.createExecutableExtension("PlayerClass");
						if (o instanceof iPlayer) {
							count++;

						}
					}
					if(e.getName().equals("Clock")){
						final Object o = e.createExecutableExtension("Clock");
						if (o instanceof iPlayer) {
							count++;

						}
					}
					
					
				}
				
			return GameArgs;
			} catch (CoreException ex) {
				System.out.println(ex.getMessage());
				return null;
			}
	  }
}
